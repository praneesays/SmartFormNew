//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IImageClientBase {
    createImage(image?: FileParameter | null | undefined): Observable<ImageView>;
}

@Injectable({
    providedIn: 'root'
})
export class ImageClientBase implements IImageClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createImage(image?: FileParameter | null | undefined): Observable<ImageView> {
        let url_ = this.baseUrl + "/api/v1/Image";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (image !== null && image !== undefined)
            content_.append("Image", image.data, image.fileName ? image.fileName : "Image");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateImage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateImage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ImageView>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ImageView>;
        }));
    }

    protected processCreateImage(response: HttpResponseBase): Observable<ImageView> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImageView.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IMetaClientBase {
    getDeploymentVersion(): Observable<DeploymentVersionWithEnvironment>;
    getAngularMetadata(): Observable<AngularMetadata>;
}

@Injectable({
    providedIn: 'root'
})
export class MetaClientBase implements IMetaClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getDeploymentVersion(): Observable<DeploymentVersionWithEnvironment> {
        let url_ = this.baseUrl + "/api/v1/Meta/deployment";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeploymentVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeploymentVersion(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeploymentVersionWithEnvironment>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeploymentVersionWithEnvironment>;
        }));
    }

    protected processGetDeploymentVersion(response: HttpResponseBase): Observable<DeploymentVersionWithEnvironment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeploymentVersionWithEnvironment.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAngularMetadata(): Observable<AngularMetadata> {
        let url_ = this.baseUrl + "/api/v1/Meta/angular";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAngularMetadata(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAngularMetadata(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AngularMetadata>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AngularMetadata>;
        }));
    }

    protected processGetAngularMetadata(response: HttpResponseBase): Observable<AngularMetadata> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AngularMetadata.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ImageView implements IImageView {
    id!: string;
    createdByUserId!: string;
    createdOn!: DateTime;
    updatedOn!: DateTime;

    constructor(data?: IImageView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdByUserId = _data["createdByUserId"];
            this.createdOn = _data["createdOn"] ? DateTime.fromISO(_data["createdOn"].toString()) : <any>undefined;
            this.updatedOn = _data["updatedOn"] ? DateTime.fromISO(_data["updatedOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ImageView {
        data = typeof data === 'object' ? data : {};
        let result = new ImageView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdByUserId"] = this.createdByUserId;
        data["createdOn"] = this.createdOn ? this.createdOn.toString() : <any>undefined;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toString() : <any>undefined;
        return data;
    }

    clone(): ImageView {
        const json = this.toJSON();
        let result = new ImageView();
        result.init(json);
        return result;
    }
}

export interface IImageView {
    id: string;
    createdByUserId: string;
    createdOn: DateTime;
    updatedOn: DateTime;
}

export class DeploymentVersionWithEnvironment implements IDeploymentVersionWithEnvironment {
    fullSemanticVersion!: string;
    buildMetadata!: string;
    buildTimestamp!: DateTime;
    branchName!: string;
    environmentName!: string;
    isProduction!: boolean;

    constructor(data?: IDeploymentVersionWithEnvironment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullSemanticVersion = _data["fullSemanticVersion"];
            this.buildMetadata = _data["buildMetadata"];
            this.buildTimestamp = _data["buildTimestamp"] ? DateTime.fromISO(_data["buildTimestamp"].toString()) : <any>undefined;
            this.branchName = _data["branchName"];
            this.environmentName = _data["environmentName"];
            this.isProduction = _data["isProduction"];
        }
    }

    static fromJS(data: any): DeploymentVersionWithEnvironment {
        data = typeof data === 'object' ? data : {};
        let result = new DeploymentVersionWithEnvironment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullSemanticVersion"] = this.fullSemanticVersion;
        data["buildMetadata"] = this.buildMetadata;
        data["buildTimestamp"] = this.buildTimestamp ? this.buildTimestamp.toString() : <any>undefined;
        data["branchName"] = this.branchName;
        data["environmentName"] = this.environmentName;
        data["isProduction"] = this.isProduction;
        return data;
    }

    clone(): DeploymentVersionWithEnvironment {
        const json = this.toJSON();
        let result = new DeploymentVersionWithEnvironment();
        result.init(json);
        return result;
    }
}

export interface IDeploymentVersionWithEnvironment {
    fullSemanticVersion: string;
    buildMetadata: string;
    buildTimestamp: DateTime;
    branchName: string;
    environmentName: string;
    isProduction: boolean;
}

export class AngularMetadata implements IAngularMetadata {
    activeDirectory!: ActiveDirectoryClientMetadata;
    deploymentVersion!: DeploymentVersionWithEnvironment;
    applicationInsightsInstrumentationKey!: string;

    constructor(data?: IAngularMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.activeDirectory = data.activeDirectory && !(<any>data.activeDirectory).toJSON ? new ActiveDirectoryClientMetadata(data.activeDirectory) : <ActiveDirectoryClientMetadata>this.activeDirectory;
            this.deploymentVersion = data.deploymentVersion && !(<any>data.deploymentVersion).toJSON ? new DeploymentVersionWithEnvironment(data.deploymentVersion) : <DeploymentVersionWithEnvironment>this.deploymentVersion;
        }
        if (!data) {
            this.activeDirectory = new ActiveDirectoryClientMetadata();
            this.deploymentVersion = new DeploymentVersionWithEnvironment();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.activeDirectory = _data["activeDirectory"] ? ActiveDirectoryClientMetadata.fromJS(_data["activeDirectory"]) : new ActiveDirectoryClientMetadata();
            this.deploymentVersion = _data["deploymentVersion"] ? DeploymentVersionWithEnvironment.fromJS(_data["deploymentVersion"]) : new DeploymentVersionWithEnvironment();
            this.applicationInsightsInstrumentationKey = _data["applicationInsightsInstrumentationKey"];
        }
    }

    static fromJS(data: any): AngularMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new AngularMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activeDirectory"] = this.activeDirectory ? this.activeDirectory.toJSON() : <any>undefined;
        data["deploymentVersion"] = this.deploymentVersion ? this.deploymentVersion.toJSON() : <any>undefined;
        data["applicationInsightsInstrumentationKey"] = this.applicationInsightsInstrumentationKey;
        return data;
    }

    clone(): AngularMetadata {
        const json = this.toJSON();
        let result = new AngularMetadata();
        result.init(json);
        return result;
    }
}

export interface IAngularMetadata {
    activeDirectory: IActiveDirectoryClientMetadata;
    deploymentVersion: IDeploymentVersionWithEnvironment;
    applicationInsightsInstrumentationKey: string;
}

export class ActiveDirectoryClientMetadata implements IActiveDirectoryClientMetadata {
    clientId!: string;
    tenant!: string;
    authority!: string;
    scopes!: string[];

    constructor(data?: IActiveDirectoryClientMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scopes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.tenant = _data["tenant"];
            this.authority = _data["authority"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
        }
    }

    static fromJS(data: any): ActiveDirectoryClientMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new ActiveDirectoryClientMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["tenant"] = this.tenant;
        data["authority"] = this.authority;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        return data;
    }

    clone(): ActiveDirectoryClientMetadata {
        const json = this.toJSON();
        let result = new ActiveDirectoryClientMetadata();
        result.init(json);
        return result;
    }
}

export interface IActiveDirectoryClientMetadata {
    clientId: string;
    tenant: string;
    authority: string;
    scopes: string[];
}

export enum KnownProblemDetailsTypes {
    EntityNotFound = "/errors/entity-not-found",
    EntityArchived = "/errors/entity-archived",
    EntityNameCollision = "/errors/entity-name-collision",
    EntityPatchFailed = "/errors/entity-patch-failed",
    EntityVersionConflict = "/errors/entity-version-conflict",
    EntityAccessDenied = "/errors/entity-access-denied",
    EntityCapabilityAccessDenied = "/errors/entity-capability-access-denied",
    ClassificationNotFound = "/errors/classification-not-found",
    FailedIngestion = "/errors/ingestion",
    InvalidIngestionToken = "/errors/ingestion/invalid-token",
    NoMatchingSources = "/errors/sources/no-matching",
    InvalidJsonFileExpression = "/errors/invalid-json-file-expression",
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}