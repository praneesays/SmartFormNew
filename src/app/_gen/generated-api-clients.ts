//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase, HttpContext } from '@angular/common/http';

import { DateTime, Duration } from "luxon";

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDeploymentVersionClientBase {
    getDeploymentVersion(): Observable<DeploymentVersionWithEnvironment>;
}

@Injectable({
    providedIn: 'root'
})
export class DeploymentVersionClientBase implements IDeploymentVersionClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getDeploymentVersion(httpContext?: HttpContext): Observable<DeploymentVersionWithEnvironment> {
        let url_ = this.baseUrl + "/api/public/v1/DeploymentVersion";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeploymentVersion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeploymentVersion(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeploymentVersionWithEnvironment>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeploymentVersionWithEnvironment>;
        }));
    }

    protected processGetDeploymentVersion(response: HttpResponseBase): Observable<DeploymentVersionWithEnvironment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeploymentVersionWithEnvironment.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IImageClientBase {
    getImage(id: string, token?: string | undefined): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class ImageClientBase implements IImageClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getImage(id: string, token?: string | undefined, httpContext?: HttpContext): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/public/v1/Image/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetImage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetImage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGetImage(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IProductsClientBase {
    getBrands(): Observable<ProductBrandView[]>;
    filterBrands(filter: ProductBrandsFilter): Observable<ProductBrandView[]>;
    getBrand(id: string): Observable<ProductBrandView>;
    getFormsForBrand(id: string): Observable<ProductFormView[]>;
    getForms(): Observable<ProductFormView[]>;
    filterForms(filter: ProductFormsFilter): Observable<ProductFormView[]>;
    getForm(id: string): Observable<ProductFormView>;
    getBrandsForForm(id: string): Observable<ProductBrandView[]>;
    getStrengthsForBrandAndForm(brandId: string, formId: string): Observable<ProductBrandFormStrengthView[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ProductsClientBase implements IProductsClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBrands(httpContext?: HttpContext): Observable<ProductBrandView[]> {
        let url_ = this.baseUrl + "/api/public/v1/Products/brands";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductBrandView[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductBrandView[]>;
        }));
    }

    protected processGetBrands(response: HttpResponseBase): Observable<ProductBrandView[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductBrandView.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    filterBrands(filter: ProductBrandsFilter, httpContext?: HttpContext): Observable<ProductBrandView[]> {
        let url_ = this.baseUrl + "/api/public/v1/Products/brands/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFilterBrands(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilterBrands(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductBrandView[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductBrandView[]>;
        }));
    }

    protected processFilterBrands(response: HttpResponseBase): Observable<ProductBrandView[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductBrandView.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getBrand(id: string, httpContext?: HttpContext): Observable<ProductBrandView> {
        let url_ = this.baseUrl + "/api/public/v1/Products/brands/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrand(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrand(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductBrandView>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductBrandView>;
        }));
    }

    protected processGetBrand(response: HttpResponseBase): Observable<ProductBrandView> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductBrandView.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getFormsForBrand(id: string, httpContext?: HttpContext): Observable<ProductFormView[]> {
        let url_ = this.baseUrl + "/api/public/v1/Products/brands/{id}/forms";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFormsForBrand(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFormsForBrand(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductFormView[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductFormView[]>;
        }));
    }

    protected processGetFormsForBrand(response: HttpResponseBase): Observable<ProductFormView[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductFormView.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForms(httpContext?: HttpContext): Observable<ProductFormView[]> {
        let url_ = this.baseUrl + "/api/public/v1/Products/forms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForms(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductFormView[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductFormView[]>;
        }));
    }

    protected processGetForms(response: HttpResponseBase): Observable<ProductFormView[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductFormView.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    filterForms(filter: ProductFormsFilter, httpContext?: HttpContext): Observable<ProductFormView[]> {
        let url_ = this.baseUrl + "/api/public/v1/Products/forms/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filter);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFilterForms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilterForms(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductFormView[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductFormView[]>;
        }));
    }

    protected processFilterForms(response: HttpResponseBase): Observable<ProductFormView[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductFormView.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForm(id: string, httpContext?: HttpContext): Observable<ProductFormView> {
        let url_ = this.baseUrl + "/api/public/v1/Products/forms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductFormView>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductFormView>;
        }));
    }

    protected processGetForm(response: HttpResponseBase): Observable<ProductFormView> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductFormView.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getBrandsForForm(id: string, httpContext?: HttpContext): Observable<ProductBrandView[]> {
        let url_ = this.baseUrl + "/api/public/v1/Products/forms/{id}/brands";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBrandsForForm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBrandsForForm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductBrandView[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductBrandView[]>;
        }));
    }

    protected processGetBrandsForForm(response: HttpResponseBase): Observable<ProductBrandView[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductBrandView.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getStrengthsForBrandAndForm(brandId: string, formId: string, httpContext?: HttpContext): Observable<ProductBrandFormStrengthView[]> {
        let url_ = this.baseUrl + "/api/public/v1/Products/brands/{brandId}/forms/{formId}/strengths";
        if (brandId === undefined || brandId === null)
            throw new Error("The parameter 'brandId' must be defined.");
        url_ = url_.replace("{brandId}", encodeURIComponent("" + brandId));
        if (formId === undefined || formId === null)
            throw new Error("The parameter 'formId' must be defined.");
        url_ = url_.replace("{formId}", encodeURIComponent("" + formId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStrengthsForBrandAndForm(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStrengthsForBrandAndForm(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductBrandFormStrengthView[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductBrandFormStrengthView[]>;
        }));
    }

    protected processGetStrengthsForBrandAndForm(response: HttpResponseBase): Observable<ProductBrandFormStrengthView[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductBrandFormStrengthView.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUiLocalizationClientBase {
    getLocalizationStrings(): Observable<any>;
    getLocalizationConfig(): Observable<UiLocalizationConfiguration>;
}

@Injectable({
    providedIn: 'root'
})
export class UiLocalizationClientBase implements IUiLocalizationClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLocalizationStrings(httpContext?: HttpContext): Observable<any> {
        let url_ = this.baseUrl + "/api/public/v1/ui-localization/strings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocalizationStrings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocalizationStrings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processGetLocalizationStrings(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getLocalizationConfig(httpContext?: HttpContext): Observable<UiLocalizationConfiguration> {
        let url_ = this.baseUrl + "/api/public/v1/ui-localization/config";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLocalizationConfig(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLocalizationConfig(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UiLocalizationConfiguration>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UiLocalizationConfiguration>;
        }));
    }

    protected processGetLocalizationConfig(response: HttpResponseBase): Observable<UiLocalizationConfiguration> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UiLocalizationConfiguration.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class DeploymentVersionWithEnvironment implements IDeploymentVersionWithEnvironment {
    fullSemanticVersion!: string;
    commitHash!: string;
    buildTimestamp!: DateTime;
    branchName!: string;
    buildNumber!: number;
    environmentName!: string;
    isProduction!: boolean;

    constructor(data?: IDeploymentVersionWithEnvironment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullSemanticVersion = _data["fullSemanticVersion"];
            this.commitHash = _data["commitHash"];
            this.buildTimestamp = _data["buildTimestamp"] ? DateTime.fromISO(_data["buildTimestamp"].toString()) : <any>undefined;
            this.branchName = _data["branchName"];
            this.buildNumber = _data["buildNumber"];
            this.environmentName = _data["environmentName"];
            this.isProduction = _data["isProduction"];
        }
    }

    static fromJS(data: any): DeploymentVersionWithEnvironment {
        data = typeof data === 'object' ? data : {};
        let result = new DeploymentVersionWithEnvironment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullSemanticVersion"] = this.fullSemanticVersion;
        data["commitHash"] = this.commitHash;
        data["buildTimestamp"] = this.buildTimestamp ? this.buildTimestamp.toString() : <any>undefined;
        data["branchName"] = this.branchName;
        data["buildNumber"] = this.buildNumber;
        data["environmentName"] = this.environmentName;
        data["isProduction"] = this.isProduction;
        return data;
    }

    clone(): DeploymentVersionWithEnvironment {
        const json = this.toJSON();
        let result = new DeploymentVersionWithEnvironment();
        result.init(json);
        return result;
    }
}

export interface IDeploymentVersionWithEnvironment {
    fullSemanticVersion: string;
    commitHash: string;
    buildTimestamp: DateTime;
    branchName: string;
    buildNumber: number;
    environmentName: string;
    isProduction: boolean;
}

export class ProductBrandView implements IProductBrandView {
    id!: string;
    name!: string;
    primaryImageUrl?: string | undefined;

    constructor(data?: IProductBrandView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.primaryImageUrl = _data["primaryImageUrl"];
        }
    }

    static fromJS(data: any): ProductBrandView {
        data = typeof data === 'object' ? data : {};
        let result = new ProductBrandView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["primaryImageUrl"] = this.primaryImageUrl;
        return data;
    }

    clone(): ProductBrandView {
        const json = this.toJSON();
        let result = new ProductBrandView();
        result.init(json);
        return result;
    }
}

export interface IProductBrandView {
    id: string;
    name: string;
    primaryImageUrl?: string | undefined;
}

export class ProductBrandsFilter implements IProductBrandsFilter {
    formIds?: string[] | undefined;

    constructor(data?: IProductBrandsFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["formIds"])) {
                this.formIds = [] as any;
                for (let item of _data["formIds"])
                    this.formIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ProductBrandsFilter {
        data = typeof data === 'object' ? data : {};
        let result = new ProductBrandsFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.formIds)) {
            data["formIds"] = [];
            for (let item of this.formIds)
                data["formIds"].push(item);
        }
        return data;
    }

    clone(): ProductBrandsFilter {
        const json = this.toJSON();
        let result = new ProductBrandsFilter();
        result.init(json);
        return result;
    }
}

export interface IProductBrandsFilter {
    formIds?: string[] | undefined;
}

export class ProductFormView implements IProductFormView {
    id!: string;
    name!: string;
    stages!: ProductFormStageView[];
    primaryImageUrl?: string | undefined;

    constructor(data?: IProductFormView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.stages) {
                this.stages = [];
                for (let i = 0; i < data.stages.length; i++) {
                    let item = data.stages[i];
                    this.stages[i] = item && !(<any>item).toJSON ? new ProductFormStageView(item) : <ProductFormStageView>item;
                }
            }
        }
        if (!data) {
            this.stages = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["stages"])) {
                this.stages = [] as any;
                for (let item of _data["stages"])
                    this.stages!.push(ProductFormStageView.fromJS(item));
            }
            this.primaryImageUrl = _data["primaryImageUrl"];
        }
    }

    static fromJS(data: any): ProductFormView {
        data = typeof data === 'object' ? data : {};
        let result = new ProductFormView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.stages)) {
            data["stages"] = [];
            for (let item of this.stages)
                data["stages"].push(item.toJSON());
        }
        data["primaryImageUrl"] = this.primaryImageUrl;
        return data;
    }

    clone(): ProductFormView {
        const json = this.toJSON();
        let result = new ProductFormView();
        result.init(json);
        return result;
    }
}

export interface IProductFormView {
    id: string;
    name: string;
    stages: IProductFormStageView[];
    primaryImageUrl?: string | undefined;
}

export class ProductFormStageView implements IProductFormStageView {
    id!: string;
    productFormId!: string;
    name!: string;
    parts!: ProductFormStagePartView[];
    imageUrl?: string | undefined;

    constructor(data?: IProductFormStageView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.parts) {
                this.parts = [];
                for (let i = 0; i < data.parts.length; i++) {
                    let item = data.parts[i];
                    this.parts[i] = item && !(<any>item).toJSON ? new ProductFormStagePartView(item) : <ProductFormStagePartView>item;
                }
            }
        }
        if (!data) {
            this.parts = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productFormId = _data["productFormId"];
            this.name = _data["name"];
            if (Array.isArray(_data["parts"])) {
                this.parts = [] as any;
                for (let item of _data["parts"])
                    this.parts!.push(ProductFormStagePartView.fromJS(item));
            }
            this.imageUrl = _data["imageUrl"];
        }
    }

    static fromJS(data: any): ProductFormStageView {
        data = typeof data === 'object' ? data : {};
        let result = new ProductFormStageView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productFormId"] = this.productFormId;
        data["name"] = this.name;
        if (Array.isArray(this.parts)) {
            data["parts"] = [];
            for (let item of this.parts)
                data["parts"].push(item.toJSON());
        }
        data["imageUrl"] = this.imageUrl;
        return data;
    }

    clone(): ProductFormStageView {
        const json = this.toJSON();
        let result = new ProductFormStageView();
        result.init(json);
        return result;
    }
}

export interface IProductFormStageView {
    id: string;
    productFormId: string;
    name: string;
    parts: IProductFormStagePartView[];
    imageUrl?: string | undefined;
}

export class ProductFormStagePartView implements IProductFormStagePartView {
    id!: string;
    productFormStageId!: string;
    name!: string;
    stageImageCoordinates?: string | undefined;

    constructor(data?: IProductFormStagePartView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.productFormStageId = _data["productFormStageId"];
            this.name = _data["name"];
            this.stageImageCoordinates = _data["stageImageCoordinates"];
        }
    }

    static fromJS(data: any): ProductFormStagePartView {
        data = typeof data === 'object' ? data : {};
        let result = new ProductFormStagePartView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productFormStageId"] = this.productFormStageId;
        data["name"] = this.name;
        data["stageImageCoordinates"] = this.stageImageCoordinates;
        return data;
    }

    clone(): ProductFormStagePartView {
        const json = this.toJSON();
        let result = new ProductFormStagePartView();
        result.init(json);
        return result;
    }
}

export interface IProductFormStagePartView {
    id: string;
    productFormStageId: string;
    name: string;
    stageImageCoordinates?: string | undefined;
}

export class ProductFormsFilter implements IProductFormsFilter {
    brandIds?: string[] | undefined;

    constructor(data?: IProductFormsFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["brandIds"])) {
                this.brandIds = [] as any;
                for (let item of _data["brandIds"])
                    this.brandIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ProductFormsFilter {
        data = typeof data === 'object' ? data : {};
        let result = new ProductFormsFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.brandIds)) {
            data["brandIds"] = [];
            for (let item of this.brandIds)
                data["brandIds"].push(item);
        }
        return data;
    }

    clone(): ProductFormsFilter {
        const json = this.toJSON();
        let result = new ProductFormsFilter();
        result.init(json);
        return result;
    }
}

export interface IProductFormsFilter {
    brandIds?: string[] | undefined;
}

export class ProductBrandFormStrengthView implements IProductBrandFormStrengthView {
    id!: string;
    name!: string;

    constructor(data?: IProductBrandFormStrengthView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ProductBrandFormStrengthView {
        data = typeof data === 'object' ? data : {};
        let result = new ProductBrandFormStrengthView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): ProductBrandFormStrengthView {
        const json = this.toJSON();
        let result = new ProductBrandFormStrengthView();
        result.init(json);
        return result;
    }
}

export interface IProductBrandFormStrengthView {
    id: string;
    name: string;
}

export class UiLocalizationConfiguration implements IUiLocalizationConfiguration {
    regions!: UiLocalizationConfigurationRegion[];

    constructor(data?: IUiLocalizationConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.regions) {
                this.regions = [];
                for (let i = 0; i < data.regions.length; i++) {
                    let item = data.regions[i];
                    this.regions[i] = item && !(<any>item).toJSON ? new UiLocalizationConfigurationRegion(item) : <UiLocalizationConfigurationRegion>item;
                }
            }
        }
        if (!data) {
            this.regions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["regions"])) {
                this.regions = [] as any;
                for (let item of _data["regions"])
                    this.regions!.push(UiLocalizationConfigurationRegion.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UiLocalizationConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new UiLocalizationConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.regions)) {
            data["regions"] = [];
            for (let item of this.regions)
                data["regions"].push(item.toJSON());
        }
        return data;
    }

    clone(): UiLocalizationConfiguration {
        const json = this.toJSON();
        let result = new UiLocalizationConfiguration();
        result.init(json);
        return result;
    }
}

export interface IUiLocalizationConfiguration {
    regions: IUiLocalizationConfigurationRegion[];
}

export class UiLocalizationConfigurationRegion implements IUiLocalizationConfigurationRegion {
    englishName!: string;
    countries!: UiLocalizationConfigurationCountry[];

    constructor(data?: IUiLocalizationConfigurationRegion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.countries) {
                this.countries = [];
                for (let i = 0; i < data.countries.length; i++) {
                    let item = data.countries[i];
                    this.countries[i] = item && !(<any>item).toJSON ? new UiLocalizationConfigurationCountry(item) : <UiLocalizationConfigurationCountry>item;
                }
            }
        }
        if (!data) {
            this.countries = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.englishName = _data["englishName"];
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(UiLocalizationConfigurationCountry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UiLocalizationConfigurationRegion {
        data = typeof data === 'object' ? data : {};
        let result = new UiLocalizationConfigurationRegion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["englishName"] = this.englishName;
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        return data;
    }

    clone(): UiLocalizationConfigurationRegion {
        const json = this.toJSON();
        let result = new UiLocalizationConfigurationRegion();
        result.init(json);
        return result;
    }
}

export interface IUiLocalizationConfigurationRegion {
    englishName: string;
    countries: IUiLocalizationConfigurationCountry[];
}

export class UiLocalizationConfigurationCountry implements IUiLocalizationConfigurationCountry {
    englishName!: string;
    localizedName!: string;
    languages!: UiLocalizationConfigurationCountryLanguage[];

    constructor(data?: IUiLocalizationConfigurationCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.languages) {
                this.languages = [];
                for (let i = 0; i < data.languages.length; i++) {
                    let item = data.languages[i];
                    this.languages[i] = item && !(<any>item).toJSON ? new UiLocalizationConfigurationCountryLanguage(item) : <UiLocalizationConfigurationCountryLanguage>item;
                }
            }
        }
        if (!data) {
            this.languages = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.englishName = _data["englishName"];
            this.localizedName = _data["localizedName"];
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(UiLocalizationConfigurationCountryLanguage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UiLocalizationConfigurationCountry {
        data = typeof data === 'object' ? data : {};
        let result = new UiLocalizationConfigurationCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["englishName"] = this.englishName;
        data["localizedName"] = this.localizedName;
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        return data;
    }

    clone(): UiLocalizationConfigurationCountry {
        const json = this.toJSON();
        let result = new UiLocalizationConfigurationCountry();
        result.init(json);
        return result;
    }
}

export interface IUiLocalizationConfigurationCountry {
    englishName: string;
    localizedName: string;
    languages: IUiLocalizationConfigurationCountryLanguage[];
}

export class UiLocalizationConfigurationCountryLanguage implements IUiLocalizationConfigurationCountryLanguage {
    englishName!: string;
    localizedName!: string;
    localeCode!: string;

    constructor(data?: IUiLocalizationConfigurationCountryLanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.englishName = _data["englishName"];
            this.localizedName = _data["localizedName"];
            this.localeCode = _data["localeCode"];
        }
    }

    static fromJS(data: any): UiLocalizationConfigurationCountryLanguage {
        data = typeof data === 'object' ? data : {};
        let result = new UiLocalizationConfigurationCountryLanguage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["englishName"] = this.englishName;
        data["localizedName"] = this.localizedName;
        data["localeCode"] = this.localeCode;
        return data;
    }

    clone(): UiLocalizationConfigurationCountryLanguage {
        const json = this.toJSON();
        let result = new UiLocalizationConfigurationCountryLanguage();
        result.init(json);
        return result;
    }
}

export interface IUiLocalizationConfigurationCountryLanguage {
    englishName: string;
    localizedName: string;
    localeCode: string;
}

export enum KnownProblemDetailsTypes {
    EntityNotFound = "/errors/entity-not-found",
    EntityArchived = "/errors/entity-archived",
    EntityNameCollision = "/errors/entity-name-collision",
    EntityPatchFailed = "/errors/entity-patch-failed",
    EntityVersionConflict = "/errors/entity-version-conflict",
    EntityAccessDenied = "/errors/entity-access-denied",
    EntityCapabilityAccessDenied = "/errors/entity-capability-access-denied",
    ClassificationNotFound = "/errors/classification-not-found",
    FailedIngestion = "/errors/ingestion",
    InvalidIngestionToken = "/errors/ingestion/invalid-token",
    NoMatchingSources = "/errors/sources/no-matching",
    InvalidJsonFileExpression = "/errors/invalid-json-file-expression",
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}